name: Publish Firmware Release

on:
  repository_dispatch:
    types: [firmware-release]

permissions:
  contents: write

jobs:
  copy-release:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Download Release from Private Repo
        env:
          GH_TOKEN: ${{ secrets.PRIVATE_REPO_TOKEN }}
        run: |
          VERSION="${{ github.event.client_payload.version }}"
          echo "Processing firmware release: ${VERSION}"
          
          # Get release info and download binaries using gh CLI
          gh release view ${VERSION} --repo unwndevices/GreenverseApp --json body > release_info.json
          
          # Extract changelog
          jq -r '.body' release_info.json > changelog.txt
          
          # Download binary using gh CLI (more reliable for private repos)
          gh release download ${VERSION} --repo unwndevices/GreenverseApp --pattern "bloom-tower-${VERSION}.bin" --clobber
               
      - name: Copy to Firmware Directory
        run: |
          VERSION="${{ github.event.client_payload.version }}"
          mkdir -p firmware/bloom-tower
          
          # Copy firmware with version tag
          cp "bloom-tower-${VERSION}.bin" "firmware/bloom-tower/"
          
          # Update latest symlink 
          cd firmware/bloom-tower
          rm -f latest.bin
          ln -s "bloom-tower-${VERSION}.bin" latest.bin
          cd ../..
          
      - name: Update releases.json
        run: |
          VERSION="${{ github.event.client_payload.version }}"
          DATE=$(date -u +%Y-%m-%d)
          
          # Create update script
          cat > update_releases.js << 'EOF'
          const fs = require('fs');
          const version = process.argv[2];
          const date = process.argv[3];
          
          let releases = { latest: version, releases: [] };
          if (fs.existsSync('releases.json')) {
            releases = JSON.parse(fs.readFileSync('releases.json'));
          }
          
          // Read changelog from extracted release notes
          const changelogText = fs.readFileSync('changelog.txt', 'utf8');
          const changelog = changelogText.split('\n').filter(line => line.trim()).slice(0, 10);
          
          // Update latest version
          releases.latest = version;
          
          // Add new release (avoid duplicates)
          const existingIndex = releases.releases.findIndex(r => r.version === version);
          const newRelease = {
            version,
            releaseDate: date,
            changelog: changelog.length > 0 ? changelog : ["Updated via automated release system"],
            platforms: {
              "bloom-tower": `https://raw.githubusercontent.com/unwndevices/GreenverseApp-firmware/main/firmware/bloom-tower/bloom-tower-${version}.bin`
            }
          };
          
          if (existingIndex >= 0) {
            releases.releases[existingIndex] = newRelease;
          } else {
            releases.releases.unshift(newRelease);
          }
          
          fs.writeFileSync('releases.json', JSON.stringify(releases, null, 2));
          EOF
          
          node update_releases.js "${VERSION}" "${DATE}"
          
          # Clean up temporary files
          rm -f bloom-tower-*.bin update_releases.js release_info.json changelog.txt
          
      - name: Commit and Push
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git commit -m "Release ${{ github.event.client_payload.version }}" || exit 0
          git push